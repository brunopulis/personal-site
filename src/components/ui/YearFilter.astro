---
interface Props {
  years: string[];
}

const { years } = Astro.props;
---

<div 
  class="flex flex-wrap gap-2 justify-start" 
  x-data="{ 
    filtroAno: 'todos',
    atualizarFiltro(ano) {
      this.filtroAno = ano;
      this.$dispatch('filtro-ano-alterado', { ano: ano });
    }
  }"
>
  <button
    type="button"
    class="px-4 py-2 rounded-full border text-sm flex items-center gap-2 transition group"
    :class="filtroAno === 'todos' ? 'bg-red-600 text-white border-red-600' : 'text-gray-600 border-gray-200 hover:border-red-300'"
    @click="atualizarFiltro('todos')"
  >
    <span>Todos os anos</span>
    <span 
      class="ml-1 px-2 py-0.5 text-xs rounded-full transition-colors"
      :class="filtroAno === 'todos' ? 'bg-red-700 text-white' : 'bg-gray-100 text-gray-600 group-hover:bg-red-50'"
    >
      <span x-text="$store.livros.length"></span>
    </span>
  </button>
  {years.map(year => (
    <button
      type="button"
      class="px-4 py-2 rounded-full border text-sm flex items-center gap-2 transition group"
      :class="filtroAno === year ? 'bg-red-600 text-white border-red-600' : 'text-gray-600 border-gray-200 hover:border-red-300'"
      @click="atualizarFiltro(year)"
    >
      <span>{year}</span>
      <span 
        class="ml-1 px-2 py-0.5 text-xs rounded-full transition-colors"
        :class="filtroAno === year ? 'bg-red-700 text-white' : 'bg-gray-100 text-gray-600 group-hover:bg-red-50'"
      >
        <span x-text="$store.livros.filter(l => l.anoLeitura === '{year}').length"></span>
      </span>
    </button>
  ))}
</div>