---
import type { GetStaticPathsOptions, Page } from "astro";
import { type CollectionEntry, getCollection } from "astro:content";

import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import HeroSection from "@/components/HeroSection.astro";
import Footer from "@/components/Footer.astro";
import Pagination from "@/components/Pagination.astro";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const posts = await getCollection("blog", ({ data }) => {
    return data.draft !== true;
  });

  const sortedPosts = posts.sort((a, b) => {
    return (
      new Date(b.data.publishDate).valueOf() -
      new Date(a.data.publishDate).valueOf()
    );
  });

  return paginate(sortedPosts, { pageSize: 6 });
}

type Props = { page: Page<CollectionEntry<"blog">> };

const { page } = Astro.props;
const blog = page.data;
console.log(blog);

// const pathname = new URL(Astro.request.url).pathname.split("/");
// const firstPath = pathname[1];

function formatDate(date: string | number | Date) {
  const formatter = new Intl.DateTimeFormat("pt-BR", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  return formatter.format(new Date(date));
}

function toISOString(dateString: string) {
  const date = new Date(dateString);
  return date.toISOString();
}
---

<Layout
  title="Blog - Bruno Pulis"
  description="Artigos sobre desenvolvimento, acessibilidade e qualidade de software"
>
  <Header />
  <main>
    <HeroSection
      title="Textos"
      description="Artigos, reviews, opiniões pessoais e pitadas ácidas de humor."
    />
    <div class="container mx-auto px-5 py-8">
      {
        blog.length === 0 ? (
          <p>Nenhum post encontrado</p>
        ) : (
          <ul>
            {blog.map(post => (
              <li class="group mb-10 flex items-start justify-between gap-8 sm:mb-12">
                <article class="space-y-5 pt-12">
                  <div class="space-x-2 text-sm text-gray-500">
                    <time datetime={toISOString(String(post.data.publishDate))}>
                      {formatDate(post.data.publishDate)}
                    </time>
                    <span>/</span>
                    <span>{post.data.tags}</span>

                    <h3 class="cursor-pointer text-2xl font-bold text-gray-900 transition-colors hover:text-red-950 lg:text-3xl">
                      <a
                        href={`/blog/${post.id}`}
                        class="focus:border-border-dashed mb-3 block group-hover:underline hover:text-red-950 focus:text-red-950"
                      >
                        {post.data.title}
                      </a>
                    </h3>

                    <div class="mt-3 text-sm leading-normal">
                      <p class="mb-6 text-gray-600 dark:text-gray-300">
                        {post.data.excerpt}
                      </p>
                    </div>
                  </div>
                </article>
              </li>
            ))}
          </ul>
        )
      }
      <Pagination
        currentPage={page.currentPage}
        lastPage={page.lastPage}
        prevUrl={page.url.prev}
        nextUrl={page.url.next}
      />
    </div>
  </main>
  <Footer />
</Layout>
